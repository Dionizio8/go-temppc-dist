// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/Dionizio8/go-temppc-dist/internal/entity"
	mock "github.com/stretchr/testify/mock"

	trace "go.opentelemetry.io/otel/trace"
)

// MockTemppcRepository is an autogenerated mock type for the TemppcRepositoryInterface type
type MockTemppcRepository struct {
	mock.Mock
}

type MockTemppcRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTemppcRepository) EXPECT() *MockTemppcRepository_Expecter {
	return &MockTemppcRepository_Expecter{mock: &_m.Mock}
}

// GetTemperature provides a mock function with given fields: ctx, zipCode, tracer
func (_m *MockTemppcRepository) GetTemperature(ctx context.Context, zipCode string, tracer trace.Tracer) (entity.Temperature, error) {
	ret := _m.Called(ctx, zipCode, tracer)

	if len(ret) == 0 {
		panic("no return value specified for GetTemperature")
	}

	var r0 entity.Temperature
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, trace.Tracer) (entity.Temperature, error)); ok {
		return rf(ctx, zipCode, tracer)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, trace.Tracer) entity.Temperature); ok {
		r0 = rf(ctx, zipCode, tracer)
	} else {
		r0 = ret.Get(0).(entity.Temperature)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, trace.Tracer) error); ok {
		r1 = rf(ctx, zipCode, tracer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTemppcRepository_GetTemperature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTemperature'
type MockTemppcRepository_GetTemperature_Call struct {
	*mock.Call
}

// GetTemperature is a helper method to define mock.On call
//   - ctx context.Context
//   - zipCode string
//   - tracer trace.Tracer
func (_e *MockTemppcRepository_Expecter) GetTemperature(ctx interface{}, zipCode interface{}, tracer interface{}) *MockTemppcRepository_GetTemperature_Call {
	return &MockTemppcRepository_GetTemperature_Call{Call: _e.mock.On("GetTemperature", ctx, zipCode, tracer)}
}

func (_c *MockTemppcRepository_GetTemperature_Call) Run(run func(ctx context.Context, zipCode string, tracer trace.Tracer)) *MockTemppcRepository_GetTemperature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(trace.Tracer))
	})
	return _c
}

func (_c *MockTemppcRepository_GetTemperature_Call) Return(_a0 entity.Temperature, _a1 error) *MockTemppcRepository_GetTemperature_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTemppcRepository_GetTemperature_Call) RunAndReturn(run func(context.Context, string, trace.Tracer) (entity.Temperature, error)) *MockTemppcRepository_GetTemperature_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTemppcRepository creates a new instance of MockTemppcRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTemppcRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTemppcRepository {
	mock := &MockTemppcRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
